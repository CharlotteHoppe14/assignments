import sys
import time

#CONSTANTS
MIN_CHEST_CODE = 3
MAX_CHEST_CODE = 7
WEAPONS = ["sword", "candle", "book"]
DOORS = ["red", "blue", "green"]

#UTILITY FUNCTIONS

def typing(text, delay=0.04):
    """Prints output one character at a time for suspense."""
    for char in text:
        sys.stdout.write(char)
        sys.stdout.flush()
        time.sleep(delay)
    print()

def get_int_input(prompt, min_v, max_v):
    """Safely gets an integer within a certain range from user."""
    while True:
        s = input(prompt)
        if not s.isdigit():
            print('Please enter a valid number!')
            continue
        val = int(s)
        if val < min_v or val > max_v:
            print(f"That number must be between {min_v} and {max_v}.")
            continue
        return val

def get_choice_input(prompt, valid_options):
    """For choices, makes sure input is within a valid list of strings."""
    ans = input(prompt).strip().lower()
    while ans not in valid_options:
        print(f"Choose one of: {', '.join(valid_options)}.")
        ans = input(prompt).strip().lower()
    return ans

#GAME SCENES

def scene_intro():
    """Game opening and name input."""
    typing("üåë Welcome to Midnight Manor! üåë")
    time.sleep(0.5)
    uname = input("Enter your name: ")
    typing(f"Hi {uname}. You're at the manor's gate. Go in? (yes/no)")
    entry = get_choice_input("> ", ["yes", "no"])
    if entry != "yes":
        typing("Gate slams behind you! No escape, only forward!")
    else:
        typing("You step inside. The door shuts behind you.")
    return uname

def scene_weapon():
    """Player chooses a weapon."""
    wpn = get_choice_input("Pick your weapon: sword/candle/book: ", WEAPONS)
    return wpn

def scene_door():
    """Player chooses a door."""
    typing("Three doors stand ahead: red, blue, green.")
    dr = get_choice_input("Which door? ", DOORS)
    return dr

def scene_chest_code():
    """Player inputs code for the chest."""
    return get_int_input(f"Enter code for the chest ({MIN_CHEST_CODE}-{MAX_CHEST_CODE}): ",
                         MIN_CHEST_CODE, MAX_CHEST_CODE)

def scene_light(wpn):
    """Candle-specific light interaction."""
    if wpn == "candle":
        typing("It's pitch dark. Light your candle? (yes/no)")
        return get_choice_input("> ", ["yes", "no"])
    return None

def resolve_outcome(wpn, dr, code, light):
    """Branching storyline and endings."""
    # Main adventure branches, using nested and chained conditionals
    if wpn == 'sword':
        typing("Your sword feels heavy. Ready for battle.")
        if dr == 'red':
            typing("A dragon blocks your way!")
            if code == 5:
                typing("Victory! You find golden treasure. üóùÔ∏è")
            else:
                typing("You swing, but the treasure chest stays locked.")
        elif dr == 'blue':
            typing("Frosty air chills you. Swing or run?")
            if code == 6:
                typing("A hidden shield saves you from icy harm.")
            else:
                typing("A shadow stalks you... You run!!")
        else:
            typing("Vines grab you! You escape, but lose your sword.")
    elif wpn == 'candle':
        if light == 'yes':
            typing("Warm light fills the room. Ghosts murmur secrets.")
            if dr == 'green':
                typing("You discover a hidden path behind a tapestry!")
            else:
                typing("Figures flicker... but nothing stops you yet.")
        else:
            typing("You grope through darkness and feel invisible webs.")
    elif wpn == 'book':
        typing("Mysterious energy hums from your book.")
        if dr == 'blue':
            typing("The book glows blue‚Äîprotection spell active!")
            if code == 7:
                typing("The code works! An exit opens, swirling with magic.")
            else:
                typing("A puzzle remains. The exit stays closed.")
        else:
            typing("Creepy laughter spills from the pages, but you press on.")
    else:
        typing("You're unarmed but hopeful. Sometimes luck wins out!")
        if code == 3:
            typing("The wall slides away! Secret door found.")
        else:
            typing("Nothing happens. Time ticks on...")

#MAIN GAME LOOP

def main():
    """Runs the whole Midnight Manor adventure game."""
    uname = scene_intro()
    wpn = scene_weapon()
    dr = scene_door()
    code = scene_chest_code()
    light = scene_light(wpn)
    resolve_outcome(wpn, dr, code, light)
    typing(f"Good job, {uname}! üëª Thanks for playing Midnight Manor.")

if __name__ == '__main__':
    main()
